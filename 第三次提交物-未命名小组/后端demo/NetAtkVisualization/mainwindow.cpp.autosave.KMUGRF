#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow),
    rate(1),
    cycle(100),
    validTime(300000)
{
    ui->setupUi(this);

    initializeUI();

}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::initializeUI()
{
    int windowsWidth = 1200, windowsHeight = 900;
    setFixedSize(windowsWidth, windowsHeight);
    setWindowTitle("网络被攻击过程图形化");

    rateLable = new QLabel(this);
    rateLable ->setGeometry(windowsWidth / 2 - 400, 50, 100, 30);
    rateLable ->setFont(QFont("Timers", 15, QFont::Bold));
    rateLable ->setAlignment(Qt::AlignCenter);
    rateLable ->setText("倍速");

    cycleLable = new QLabel(this);
    cycleLable ->setGeometry(windowsWidth / 2 - 260, 50, 170, 30);
    cycleLable ->setFont(QFont("Timers", 15, QFont::Bold));
    cycleLable ->setAlignment(Qt::AlignCenter);
    cycleLable ->setText("刷新周期(ms)");

    validTimeLable = new QLabel(this);
    validTimeLable ->setGeometry(windowsWidth / 2 - 60, 50, 170, 30);
    validTimeLable ->setFont(QFont("Timers", 15, QFont::Bold));
    validTimeLable ->setAlignment(Qt::AlignCenter);
    validTimeLable ->setText("显示范围(ms)");

    rateEdit = new QLineEdit(this);
    rateEdit ->setGeometry(windowsWidth / 2 - 400, 80, 100, 40);
    rateEdit ->setFont(QFont("Timers", 15, QFont::Bold));
    rateEdit ->setText(QString::number(1));

    cycleEdit = new QLineEdit(this);
    cycleEdit ->setGeometry(windowsWidth / 2 - 250, 80, 150, 40);
    cycleEdit ->setFont(QFont("Timers", 15, QFont::Bold));
    cycleEdit ->setText(QString::number(100));

    validTimeEdit = new QLineEdit(this);
    validTimeEdit ->setGeometry(windowsWidth / 2 - 50, 80, 150, 40);
    validTimeEdit ->setFont(QFont("Timers", 15, QFont::Bold));
    validTimeEdit ->setText(QString::number(300000));

    acceptButton = new QPushButton(this);
    acceptButton ->setGeometry(windowsWidth / 2 + 150, 80, 100, 40);
    acceptButton ->setFont(QFont("Timers", 15, QFont::Bold));
    acceptButton ->setText("应用");
    QObject::connect(acceptButton, SIGNAL(clicked()), this, SLOT(startListening()));

    resetButton = new QPushButton(this);
    resetButton ->setGeometry(windowsWidth / 2 + 300, 80, 100, 40);
    resetButton ->setFont(QFont("Timers", 15, QFont::Bold));
    resetButton ->setText("重置");
    QObject::connect(resetButton, SIGNAL(clicked()), this, SLOT(startListening()));

    openFileButton = new QPushButton(this);
    openFileButton ->setGeometry(windowsWidth / 2 - 100, windowsHeight - 100, 200, 50);
    openFileButton ->setFont(QFont("Timers", 18, QFont::Bold));
    openFileButton ->setText("打开文件");
    QObject::connect(openFileButton, SIGNAL(clicked()), this, SLOT(startListening()));
}

void MainWindow::accept()
{
    float tempRate = rateEdit ->text().toFloat();
    int tempCycle = cycleEdit ->text().toInt();
    int tempValidTime = validTimeEdit ->text().toInt();
    if(notIn(tempRate, 0.1f, 20.0f) || notIn(tempCycle, 50, 2000) || notIn(tempValidTime, 1000, 1200000))
    {
        QMessageBox::warning(nullptr, "参数错误", "请检查参数是否合法(速率:0.1~20，刷新周期:50~2000，显示范围:1000~1200000)");
    }
    else
    {
        rate = tempRate;
        cycle = tempCycle;
        validTime = tempValidTime;
        reader = new DataReader_csv(filePath, rate, cycle, validTime);
        reader ->start();
    }
}

void MainWindow::reset()
{
    rateEdit ->setText(QString::number(rate));
    cycleEdit ->setText(QString::number(cycle));
    validTimeEdit ->setText(QString::number(validTime));
}

void MainWindow::openFile()
{
    
}
